Справочник по C++. 1-е издание (испр.)

Автор: Ю. С. Стадин. 2019 год

1) Библиотеки и предварительно-откомпилированные заголовки

	* "pch.h" - основной предварительно-откомпилированный заголовок, необходимый для всех проектов в среде Visual Studio. Подключается с помощью #include "pch.h". Обязательно должен быть объявлен первым среди всех остальных заголовков и библиотек.
	* <cstdlib> - заголовочный файл, который содержит в себе функции, занимающиеся выделением памяти, контролем процесса выполнения программы, преобразованием типов.
	* <iostream> - заголовочный файл с классами, функциями и переменными для организации ввода-вывода. Для реализации функционала данной библиотеки требуется прописать строку using namespace std; после заголовков и библиотек.
	* <math.h> - заголовочный файл, разработанный для выполнения простых математических операций. Большинство функций привлекают использование чисел с плавающей точкой.
	* <string> - класс с методами и переменными для организации работы со строками в языке программирования C++.
	* <ctime> - эта библиотека содержит функции для работы со временем и датой в С++.
	* <Windows.h> - заголовочный файл библиотеки для работы с консолью Windows OS.

2) Основные типы данных, форматирование

	* char (%c) - целочисленный, самый маленький из возможных адресуемых типов. Может содержать базовый набор символов. Размер 8 бит. Значения вводятся с помощью одинарных кавычек, например char symbol = '-';
	Поправка: тип *char - стандартный тип строки в c++, 
например char line[] = "It's a line";
	* int (%i; %d)- основной тип целого числа со знаком. Может содержать числа как минимум из диапазона [?32767, +32767][3]. Таким образом, это по крайней мере 16 бит (2 байта).
	* long (%li; %ld) - тип длинного целого числа со знаком. Может содержать числа, как минимум, в диапазоне [?2 147 483 648, +2 147 483 647].[3][4] Таким образом, это по крайней мере 32 бита (4 байта).
	* long long (%lli)- тип длинного длинного (двойного длинного) целого числа со знаком. Может содержать числа как минимум в диапазоне 
[?9 223 372 036 854 775 808, +9 223 372 036 854 775 807].[3][4] Таким образом, это по крайней мере 64 бита.
	* double (%f; %lf - при использовании scanf()) - тип вещественного числа с плавающей запятой, обычно называемый типом числа двойной точности с плавающей запятой. На большинстве систем соответствует IEEE 754 бинарный формат с плавающей запятой двойной точности.
	* string (%s) - строковый формат. Значения вводятся с помощью кавычек, например string line = "hello!";
	* bool - булёвый формат. Принимает два значения - true или false.

Преобразование числового значения в строковое (библиотека cstdlib):
	* std::to_string(x); Где x - переменная любого из следующих типов: int, long, long long, double.
Преобразование строки в целое число (библиотека cstdlib):
	* std::stoi(s); Где s - переменная строкового типа.
Преобразование строки в десятичное число типа double(библиотека cstdlib): 
	* std::stod(s); Где s - переменная строкового типа.
Преобразование символа типа char* в десятичное число типа double(библиотека cstdlib): 
	* std::atof(c); Где c - переменная типа char*.


Пример (1): 
	#include "pch.h" //Только для Visual Studio
	#include <iostream>
	#include <cstdlib>
	#include <string>
	using namespace std;
	int main()
	{
		int x;
		cin >> x;
		string s = std::to_string(x);
		cout << s << endl;
		system("pause"); //"Заморозить" программу, чтобы не закрылась
		return 0;
	}

Пример (2) :
	#include "pch.h" //Только для Visual Studio
	#include <iostream>
	#include <cstdlib>
	#include <string>
	using namespace std;
	int main()
	{
		string s;
		cin >> s;
		int x = std::stoi(s);
		cout << x << endl;
		system("pause"); //"Заморозить" программу, чтобы не закрылась
		return 0;
	}

Пример (2) :
	#include "pch.h" //Только для Visual Studio
	#include <iostream>
	#include <cstdlib>
	#include <string>
	using namespace std;
	int main()
	{
		string s;
		cin >> s;
		int x = std::stoi(s);
		cout << x << endl;
		system("pause"); //"Заморозить" программу, чтобы не закрылась
		return 0;
	}

Пример (3) :
	#include "pch.h" //Только для Visual Studio
	#include <iostream>
	#include <cstdlib>
	#include <string>
	using namespace std;
	int main()
	{
		string s;
		cin >> s;
		double d = std::stod(s);
		cout << d << endl;
		system("pause"); //"Заморозить" программу, чтобы не закрылась
		return 0;
	}

Пример (4) :
	#include "pch.h" //Только для Visual Studio
	#include <iostream>
	#include <cstdlib>
	#include <string>
	using namespace std;
	int main()
	{
		char s[] = "";
		cin >> s;
		double d = std::atof(s);
		cout << d << endl;
		system("pause"); //"Заморозить" программу, чтобы не закрылась
		return 0;
	}

3) Ввод/вывод:
	

На основе библиотеки iostream и пространства имён std:
	1. using namespace std; - эту строку нужно прописать ниже библиотек.
	2. cout << "text"; - вывод текста на экран консоли.
	3. cout << "text" << ", some text"; - вывод нескольких участков текста в качестве цельного предложения.
	4. cout << "text:" << s; - вывод текста и значения переменной s любого типа.
	5. cout << "this is a first text line" << endl; - вывод текста с последующим переходом на следующую строку консоли. endl - оператор перехода на следующую строку.
	6. cin >> s; - ввод данных с клавиатуры в переменную подходящего типа. Тип переменной может быть всегда строковым или любым другим, если введённые данные полностью соответствуют строковому представлению переменной данного типа, например: 
						string s;
						cin >> s;
						//Пользователь вводит с клавиатуры 							"hello"
-------------------------------------------------------------------------
				double x;
				cin >> x;
				//Пользователь вводит с клавиатуры "12.1"

	Если введённый с клавиатуры тип данных не соответствует вводимой переменной, программа сгенерирует исключение!

На основе стандартной библиотеки ввода/вывода:

	1. printf("text") - для устаревших компиляторов; или printf_s("text") - для современных компиляторов. - Вывод текста на экран консоли. 
	2. printf_s("text" + ", some text"); - вывод нескольких участков текста в качестве цельного предложения.
	3. printf_s("%i", x); - вывод переменной x целочисленного типа с параметром %i, указывающим способ форматирования данных для вывода, в данном случае для целочисленных переменных.
	4. printf_s("double count:%f", d); - вывод текста и значения переменной d, типа double, с параметром %f, указывающим способ форматирования данных.
	5. printf_s("this is a first text line\n"); - вывод текста с последующим переходом на следующую строку консоли. 
	6. scanf_s("%s", s); - ввод данных с клавиатуры в переменную заданного параметром типа, в данном случае тип строковый. 

4) Условные операторы:

	1) switch:
		switch(x)
		{
			case значение1:
			//Код, выполняемый если x == значение1
			break;
			case значение2:
			//Код, выполняемый если x == значение2
			break;
			default:
			//Код, выполняемый если значение переменной x не 				удовлетворяет ни одному из вариантов
			break;
		}
	Где x - переменная любого типа. "значение1", "значение2" - значения, соответствующего сравниваемой переменной типа, сравниваемые со значением переменной x.
	Операнд break; - означает, что если данный вариант удовлетворяет значению переменной, то после выполнения кода данного блока, предотвратить дальнейшую проверку подходящих вариантов. 

	2) if/else:
		if( (условие1 && условие2) || (условие3) )
		{
			//Код, выполняемый при выполнении обшего условия 				оператора
		}
		else
		{
			//Код, выполняемый если общее условие оператора не 				выполняется
		}
	
	Общее условие - есть совокупность всех логических условий оператора. 
Общее условие может иметь только одно логическое значение типа bool - true или false, то есть верно или ложно. && - логический оператор "и", то есть конструкция (условие1 && условие2) - указывает, что для достижения истинности общего условия необходимо чтобы были истинны и условие1 и условие2! || - логический оператор "или", то есть конструкция 
(условие1 && условие2) || (условие3) указывает, что для достижения истинности общего условия необходимо чтобы было истинно ЛИБО условие3, ЛИБО и условие1 и условие2! Для разграничения логических условий используют круглые скобки.

5) Циклы:

	1) for:
		for (int i = 0; i < 10; i++)
		{
			//Код, выполняемый всякий раз, когда условие 					существования цикла выполняется
		}

	"int i = 0" - область для определения переменной любого типа для данного цикла. Можно использовать уже существующие переменные, тогда эту область можно оставить пустой, например:
						double d = 0;
						for (; d < 10; d++)
						{

						}

"i < 10" - область логического условия существования цикла. То есть пока логическое условие истинно (выполняется), будет выполнятся код (тело) цикла. По выполнении кода цикл снова возвращается к условию и проверяет его на истинность, и если оно истинно, то код снова выполнится, и так до тех пор, пока условие не станет ложным.

"i++" - область, описывающая действие, выполняемое тогда, когда код возвращается к очередной проверке истинности условия. Данную область также можно оставить пустой, например: 
						double d = 0;
						for (; d < 10;)
						{
				
						}

	2) while
		while (x < 12)
		{
			//Код, выполняемый до тех пор, пока истинно условие цикла 			(x < 12)
		}

6) Массивы:
	
	1) Объявление массива:

		1 способ:
			int x_array[n]; Где int - тип массива, [] - место для указания кол-ва элементов, n - целочисленная константа, описывающая размер массива (кол-во элементов)
	
		2 спопоб:
			int x_array[] = {1, 2, 3, 4, 5};
			string s_array[] = {"h", "e", "l", "l", "o"};
Здесь в фигурных скобках записано перечисление элементов массива, заданных явно. [] - пусто, т.к размер массива будет установлен исходя из кол-ва элементов в фигурных скобках.
		
		Двумерные массивы (матрицы):
			int x_matrix[i][j]; Где i - константа, указывающая кол-во строк массива-матрицы, j - константа, указывающая кол-во столбцов массива-матрицы. int - тип массива-матрицы.
			int x_matrix[i][j] = { {1, 2, 3},
						       {4, 5, 6},
						       {7, 8, 9} }; 
	В данном случае i можно оставить пустой, но j обязательно должна быть указана! (int x_matrix[][j] = ...);

	Динамические массивы:
		Такие массивы могут иметь перемнное кол-во элементов:
			double **d_matrix = new double*[i]; - Двумерный динамический массив типа double.
			for (int x = 0; x < i; x++)
			{
				d_matrix[x] = new double[j];
			}
	Цикл создаёт в каждой из i строк массива-матрицы еще по одному массиву, состоящему из j (кол-во столбцов) элементов. В результате образуется динамический двумерные массив. 

		double *d_array = new double[i]; Где i - кол-во элементов массива (переменная).

	Кол-во элементов в массиве:
		
		string s_array[] = {"h", "i"};
		int n = sizeof(s_array) / sizeof(string); //sizeof(string), 		string - тип массива.

	Здесь n будет равно 2, т.к кол-во элементов в массиве равно 2.

	7) Работа с консолью (библиотека windows.h)

		system("pause"); - "заморозить" экран в текущем состоянии (чтобы программа не закрывалась по выполнении).

		system("cls"); - очистить экран консоли.

		HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(console, FOREGROUND_BLUE);

	Изменяет цвет текста на FOREGROUND_BLUE - синий. Для изменения цвета фона, следует использовать класс BACKGROUND_ЦВЕТ. 

		Sleep(1000); - пауза-таймер. Программа продолжит выполнение через указанное в скобках время в миллисекундах.

	8) Генерирование произвольных целых и дробных чисел в заданном диапазоне (библиотека ctime)

	double random(double min, double max)
	{
		double f = (double)rand() / RAND_MAX;
		return min + f * (max - min);
	}
Вызов функции - random(-5.2, 10.0); -5 - минимальная граница диапазона. 10 - максимальная граница диапазона. Генерирование дробных чисел
Пример:
	double random(double min, double max)
	{
		double f = (double)rand() / RAND_MAX;
		return min + f * (max - min);
	}
	int main()
	{
		srand(time(NULL)); //Сменить семя генератора на тики процессора
		double x = random(-12.5, 128.10);
		return 0;
	}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	int random(int min, int max)
	{
		double f = (double)rand() / RAND_MAX;
		return min + f * (max - min);
	}
Вызов функции - random(-5, 10); -5 - минимальная граница диапазона. 10 - максимальная граница диапазона. Генерирование ЦЕЛЫХ чисел
Пример:
	int random(int min, int max)
	{
		double f = (double)rand() / RAND_MAX;
		return min + f * (max - min);
	}
	int main()
	{
		srand(time(NULL)); //Сменить семя генератора на тики процессора
		int x = random(-12, 128);
		return 0;
	}


	9) Поиск подстроки в строке

		string s = "hello";
		int n = s.find("o");
	
В результате n получить значение 5, т.к символ "o" в слове "hello" имеет индекс 5, считая от 1. Если функция не найдёт нужный символ или строку, то вернёт значение = -1.

	